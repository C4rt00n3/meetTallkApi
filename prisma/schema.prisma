generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Location {
  uuid      String  @id @default(uuid())
  latitude  String? @map("lat")
  longitude String? @map("lng")
  state     String? @map("estado")
  city      String? @map("municipio")
  country   String?
  users     User[]

  @@map("localizacao")
}

enum State {
  AC
  AL
  AP
  AM
  BA
  CE
  DF
  ES
  GO
  MA
  MG
  MS
  MT
  PA
  PB
  PE
  PI
  PR
  RJ
  RN
  RO
  RR
  RS
  SC
  SE
  SP
  TO
}

model User {
  uuid             String            @id @default(uuid())
  name             String            @map("nome")
  age              Int               @map("idade")
  gender           Gender?           @default(M) @map("sexo")
  locationId       String?           @map("localizacao_id")
  location         Location?         @relation(fields: [locationId], references: [uuid])
  chatParticipants ChatParticipant[]
  authId           String            @unique @map("autenticacao_id")
  auth             Auth              @relation(fields: [authId], references: [uuid])
  blocks           Block[]
  profileImages    ImageProfile[]
  messageImages    ImageMessage[]
  preference       Preference?        @relation(fields: [preferenceUuid], references: [uuid])
  preferenceUuid   String? @unique

  @@map("usuario")
}

model Preference {
  uuid   String @id @default(uuid())
  gender Gender
  maxAge Int
  user User[]
}

model Block {
  uuid          String  @id @default(uuid())
  userId        String?
  blockedUserId String
  blockedUser   User    @relation(fields: [blockedUserId], references: [uuid], onDelete: Cascade)

  @@unique([userId, blockedUserId])
}

model Auth {
  uuid     String @id @default(uuid())
  email    String @unique
  password String
  user     User?

  @@map("autenticacao")
}

enum Gender {
  F
  M
}

model Chat {
  uuid            String            @id @default(uuid())
  createdAt       DateTime          @default(now())
  lastMessageDate DateTime?         @map("lastDateMessage")
  fav             Boolean           @default(false)
  messages        Message[]
  participants    ChatParticipant[]

  @@map("chat")
}

model ChatParticipant {
  chatId String
  userId String

  chat Chat @relation(fields: [chatId], references: [uuid], onDelete: Cascade)
  user User @relation(fields: [userId], references: [uuid], onDelete: Cascade)

  @@id([chatId, userId])
  @@map("chat_participant")
}

model Message {
  uuid           String       @id @default(uuid())
  text           String
  type           MessageType? @default(TEXT) @map("tipo")
  url            String?
  chatId         String       @map("chat_uuid")
  createdAt      DateTime     @default(now())
  senderId       String       @map("sender_id")
  receiverId     String?      @map("receive_id")
  chat           Chat         @relation(fields: [chatId], references: [uuid])
  isRead         Boolean      @default(false)
  deletedLocally Boolean      @default(false)

  replyToId String?   @map("resposta_a_id")
  replyTo   Message?  @relation("MessageReplies", fields: [replyToId], references: [uuid])
  replies   Message[] @relation("MessageReplies")
  isUpdate  Boolean   @default(false)
  updateAt  DateTime? @updatedAt

  countUpdate Int @default(0)

  @@map("message")
}

enum MessageType {
  AUDIO
  TEXT
  IMAGE

  @@map("tipo")
}

model ImageProfile {
  uuid     String  @id @default(uuid())
  src      Bytes
  user     User?   @relation(fields: [userUuid], references: [uuid])
  userUuid String?

  isPrimary Boolean @default(false)

  @@map("image_perfil")
}

model ImageMessage {
  uuid     String  @id @default(uuid())
  src      Bytes
  user     User?   @relation(fields: [userUuid], references: [uuid])
  userUuid String?

  @@map("image_message")
}
